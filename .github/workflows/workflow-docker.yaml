name: CI/CD JuliParodi SuperHero API

on:
  push:
    branches:
      - master
      
env:
  DOCKER_IMAGE_TAG: ${{ github.ref == 'refs/heads/master' && 'prod-' || 'dev-' }}${{ github.sha }}
  GITHUB_REGISTRY: ghcr.io
  GITHUB_REPOSITORY: ${{ github.repository }}


jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          settings-path: ${{ github.workspace }}

      - name: Build JAR
        run: mvn package -DskipTests

      - name: Run Tests
        run: mvn test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build --platform linux/amd64 -t juliparodi/super-hero-api:$GITHUB_SHA .
          docker push juliparodi/super-hero-api:$GITHUB_SHA
      
      

  analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java-kotlin' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          settings-path: ${{ github.workspace }}

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.8.0  # Set your desired Helm version

      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin/
          oc version

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_API_URL }} --token=${{ secrets.OPENSHIFT_TOKEN }} --insecure-skip-tls-verify=true
        env:
          OPENSHIFT_API_URL: ${{ secrets.OPENSHIFT_API_URL }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

      - name: Set OpenShift project
        run: |
          oc project ${{ secrets.OPENSHIFT_PROJECT }}

      - name: Deploy using Helm
        run: |
          helm upgrade --install superhero-app ./helm/super-hero --namespace=${{ secrets.OPENSHIFT_PROJECT }} --set image.tag=$GITHUB_SHA

      - name: Wait for the application pod to be ready
        run: |
         # Wait for the pod to be running
         oc wait --for=condition=available --timeout=600s deployment/superhero-app --namespace=${{ secrets.OPENSHIFT_PROJECT }} --set image.tag=$GITHUB_SHA 
